<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<title>Computer scientists ask &quot;What is ToonTalk?&quot;</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080">

<p align="center"><font size="5" face="Comic Sans MS"><b>The Computer Science behind
ToonTalk </b></font>
<OBJECT id=AgentControl codeBase=#VERSION=2,0,0,0 classid=clsid:D45FD31B-5C6E-11D1-9EC1-00C04FD7081F VIEWASTEXT></OBJECT>

<SCRIPT language=javascript src="../agent.js"></SCRIPT>
<SCRIPT language=javascript src="strings.js"></SCRIPT>
<SCRIPT language=JavaScript event="Click(CharacterID, Button, Shift, X, Y)" for=AgentControl> 

<!-- 

reactToAgentClicked(CharacterID, Button, Shift, X, Y); 

--> </SCRIPT><SCRIPT language=JavaScript event=IdleStart(CharacterID) for=AgentControl> 

<!-- 

idleAgent(CharacterID); 

--> 

</SCRIPT>
<INPUT onclick=agentStart() type=image alt="Peedy can read this page for you." src="../reading.gif" name=Image1 width="58" height="51"></p>

<p><font face="Comic Sans MS">ToonTalk is an interpreter for a concurrent constraint
programming language. Concurrent constraint programming is a synthesis of concurrent logic
programming and constraint logic programming. (See, for example, <a
href="http://mitpress.mit.edu/book-home.tcl?isbn=0262192977">Saraswat</a>). The class of
languages for which programs are roughly interchangeable with ToonTalk programs include <a
href="http://www.mozart-oz.org/">Oz</a>, <a href="http://www.erights.org">E-Lang</a>,
Janus, Flat Guarded Horn Clauses, <a href="http://www.klic.org/">KL1/KLIC</a>, Flat
Concurrent Prolog, Parlog, and Strand. The syntax of all these languages is textual while
ToonTalk has an action-oriented video game animation syntax. The programming environment
is completely different as well. In ToonTalk, the process of constructing, testing, and
debugging programs closely resembles playing a video game. &quot;<a href="iclpabs.htm">From
Prolog and Zelda to ToonTalk</a>&quot; is a paper discussing these ideas in detail.</font></p>

<p><font face="Comic Sans MS">Pictorial Janus is a visual version of Janus in which
pictures are used for source code and the execution of a program can be seen as an
animation. ToonTalk differs from Pictorial Janus (and all visual programming languages) in
that the source code is animated and concrete as opposed to the static and abstract syntax
of visual programming languages. (See <a
href="ftp://ftp.parc.xerox.com/pub/PictorialJanus">Pictorial Janus ftp site</a> and <a
href="http://jerry.c-lab.de/~wolfgang/PJ/">Paderborn University web page</a>.) </font></p>

<p><font face="Comic Sans MS">The computational model underlying ToonTalk supports the
dynamic creation and termination of asynchronous processes. First-class send and receive
capabilities provide a means for these processes to communicate and synchronize. All state
is local to processes. There is a close relationship between concurrent object-oriented
programming languages (including actor languages) and ToonTalk. (See <a href="papers.htm">ToonTalk
papers</a>.)&nbsp; </font><font size="3" face="Comic Sans MS">Here is <a href="concur.htm">an
essay</a> about how ToonTalk is concurrent and why it is difficult to extend conventional
languages to be concurrent.</font></p>

<p><font size="3" face="Comic Sans MS">ToonTalk includes a puzzle game that includes a
sequence of over 60 puzzles. The connections to computer programming and computer science
for each puzzle are described <a href="puzlearn.htm">here</a>.</font></p>

<p><font size="3" face="Comic Sans MS">One way to understand ToonTalk is that it provides
&quot;concretizations&quot; of computational abstractions. For each computational
abstraction ToonTalk provides a tangible equivalent analog.</font></p>
<div align="center"><center>

<table border="0">
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3"><b>Computational
    Abstraction </b></font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3"><b>ToonTalk
    Concretization</b></font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">computation</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">city</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">actor or process or
    object</font></td>
    <td align="center"><p align="center"><font color="#FF0000" face="Comic Sans MS" size="3">house</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">methods</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">robots</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">method
    preconditions</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">contents of thought
    bubble</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">method actions</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">actions taught to
    robot</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">tuples or messages
    or vectors</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">boxes</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">comparison tests</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">scales</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">actor spawning</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">loaded trucks</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">actor termination</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">bombs</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">constants</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">numbers, text, and
    pictures</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">channel transmit
    capabilities </font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">birds</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">channel receive
    capabilities</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">nests</font></td>
  </tr>
  <tr>
    <td align="center"><font face="Comic Sans MS" color="#008080" size="3">program storage</font></td>
    <td align="center"><font color="#FF0000" face="Comic Sans MS" size="3">notebooks</font></td>
  </tr>
</table>
</center></div>

<p align="left"><font face="Comic Sans MS">Another way to understand the computational
model of ToonTalk is to consider what you can train robots to do:</font></p>

<blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">send a message (i.e. tell a constraint)</font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by giving a box or pad to a bird,</font></p>
  </blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">spawn a new agent </font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by dropping a box and a team of robots into a
    truck, </font></p>
  </blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">perform simple primitive operations (e.g. +, -, *)</font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by dropping a pad on a pad, </font></p>
  </blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">copy an item </font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by using a magician's wand,</font></p>
  </blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">terminate an agent </font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by setting off a bomb,</font></p>
  </blockquote>
  <p><font face="Symbol" size="2">·</font><font size="2"> </font><font face="Comic Sans MS"
  size="3">change the contents of a tuple</font></p>
  <blockquote>
    <p><font face="Comic Sans MS" size="3">by taking out items and placing new ones.</font></p>
  </blockquote>
</blockquote>

<p id="DontRead" align="center"><small><font face="Comic Sans MS"><a href="toontalk.htm">home</a> | <a href="search.htm">search</a> | <a href="buy.htm">purchase</a> | <a href="doc.htm">manual</a>
| <a href="whatsnew.htm">news</a> | <a href="infodesk.htm">info</a> | <a href="games.htm">games</a>
| <a href="faq.htm">faq</a> | <a href="support.htm">support</a> | <a href="free.htm">downloads</a>
| <a href="endorse.htm">endorsements</a> | <a href="press.htm">press</a> | <a href="address.htm">contact us</a></font></small></p>

</body>
</html>