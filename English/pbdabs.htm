<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Generalizing by Removing Detail</title>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
</head>

<body>
<b><font SIZE="5">

<p ALIGN="CENTER">Generalizing by Removing Detail:</p>

<p ALIGN="CENTER">How Any Program Can Be Created by Working with Examples </font><font SIZE="4"></p>

<p ALIGN="CENTER">Ken Kahn</p>

<p ALIGN="CENTER">Animated Programs</p>
</font>

<p>Abstract</b></p>

<p ALIGN="JUSTIFY">A long-standing goal of the programming by demonstration research
community is to enable people to construct programs by showing how the desired programs
should work on sample inputs. A major challenge is how to make the programs general.
Heuristics and inference can generalize recorded actions on sample data in narrow domains
but have yet to be much help in general purpose programming. This paper describes a
programming system called ToonTalk<sup>®</sup> [Kahn 96, Kahn 00] that takes a different
approach. In ToonTalk the programmer generalizes recorded actions by explicitly removing
details. Children as young as 6 have constructed a wide variety of programs in this manner
[Playground 00].</p>

<p ALIGN="JUSTIFY">There is a very important interplay between the way in which programs
are created and generalized in ToonTalk and the underlying model of computation. A program
is executed as a collection of autonomous processes that communicate asynchronously where
the behavior of a process is specified by a set of guarded clauses. A clause is
constructed by performing operations on a single sample data structure. To make the clause
capable of operating on other data structures, the programmer needs only to remove details
from the guard or conditional part of the clause.</p>

<p ALIGN="JUSTIFY">ToonTalk is built upon the idea of <i>animated programming</i>.
Animated programs are not constructed by typing text or by constructing diagrams or
stringing icons together. Instead, the programmer is placed as a character in an animated
virtual world where programming abstractions are replaced by tangible analogs. A data
structure, for example, is a box whose holes can be filled with number or text pads, other
boxes, birds, nests, and robots. Birds and nests are concrete analogs of send and receive
capabilities on communication channels. A robot is a guarded clause that has been trained
by the programmer to take actions when given a box. The thought bubble of a robot displays
the guard or conditions that need to be satisfied before the robot will run. To generalize
a robot, a programmer needs only to use an animated vacuum to remove details from the box
inside the robot&#146;s thought bubble.</p>

<p align="center">A short version of this article appeared in the <em><font size="3">Communications
of the ACM, March 2000.</font></em></p>

<p align="center">The full-length version of this article can be found as a chapter in the
book <em><a href="http://books.google.co.uk/books?id=pSwuIndX5gAC&dq=your+wish+is+my+command+programming+by+example&pg=PP1&ots=FW3HVfraRv&sig=llFyaIn4ofdyeVQa7QS7KgtUmBg&hl=en&prev=http://www.google.co.uk/search?sourceid=navclient&ie=UTF-8&rlz=1T4GFRD_enUS229US229&q=Your+Wish+Is+My+Command:+Programming+By+Example+&sa=X&oi=print&ct=title&cad=one-book-with-thumbnail">Your
Wish Is My Command: Programming By Example</a>.</em></p>

<p align="left"><em>&nbsp;</em>Download the entire paper as an <a href="http://www.toontalk.com/Papers/yourwish.pdf">Adobe Acrobat file 
  (PDF)</a>&nbsp; - 7.5MB</p>

<p align="center"><small><font face="Comic Sans MS"><a href="toontalk.htm">home</a> | <a href="http://www.toontalk.com/English/search.htm">search</a>
| <a href="buy.htm">purchase</a> | <a href="doc.htm">manual</a> | <a href="whatsnew.htm">news</a>
| <a href="infodesk.htm">info</a> | <a href="faq.htm">faq</a> | <a href="support.htm">support</a>
| <a href="free.htm">downloads</a> | <a href="press.htm">press</a> | <a href="address.htm">contact
us</a></font></small></p>
</body>
</html>