
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<title>Thinking skills and ToonTalk</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><font size="5" face="Comic Sans MS"><b>Thinking skills and ToonTalk </b></font>
<OBJECT id=AgentControl codeBase=#VERSION=2,0,0,0 classid=clsid:D45FD31B-5C6E-11D1-9EC1-00C04FD7081F VIEWASTEXT></OBJECT>

<SCRIPT language=javascript src="../agent.js"></SCRIPT>
<SCRIPT language=javascript src="strings.js"></SCRIPT>
<SCRIPT language=JavaScript event="Click(CharacterID, Button, Shift, X, Y)" for=AgentControl> 

<!-- 

reactToAgentClicked(CharacterID, Button, Shift, X, Y); 

--> </SCRIPT><SCRIPT language=JavaScript event=IdleStart(CharacterID) for=AgentControl> 

<!-- 

idleAgent(CharacterID); 

--> 

</SCRIPT>
<INPUT onclick=agentStart() type=image alt="Peedy can read this page for you." src="../reading.gif" name=Image1 width="58" height="51"></p>

<p><font face="Comic Sans MS">ToonTalk is a fertile and playful environment for children
(of all ages) to learn the following critical thinking skills: </font>

<ul>
  <li><font face="Comic Sans MS"><b>Problem decomposition.</b> When a child tries to build
    anything beyond the simplest program in ToonTalk, they are immediately faced with the task
    of breaking the problem down into &quot;robot-sized&quot; (or more ideally
    &quot;mind-sized&quot;) pieces. When done well, it is then easy to build or program each
    piece. This is a very general design skill that applies throughout science, engineering,
    and the arts as well. For larger problems, there is a hierarchical structure to this
    activity, where problems are broken into pieces and the pieces are in turn broken into
    smaller pieces. </font></li>
  <li><font face="Comic Sans MS"><b>Component composition.</b> This is the second half or dual
    to problem decomposition. Just because one has pieces that work in isolation does not mean
    that it is trivial to compose them. There are usually interactions between the parts that
    need to be dealt with. Often components can be composed in different ways, only a few of
    which work. Again this is a very broad design and problem-solving skill. Difficulties
    composing parts often leads to redesign of the problem decomposition. Some argue that this
    is a special case of the more general &quot;debugging&quot; skills one acquires while
    programming. </font></li>
  <li><font face="Comic Sans MS"><b>Explicit representation.</b> Software that models
    something, whether it be a bouncing ball, an ant colony, city traffic, or a game, needs to
    have data structures that represent something else. For the ball, the child may create a
    structure that holds the ball's position, speed and direction of motion. For an ant it may
    be the ant's level of hunger, energy, and a representation of the state of various
    sensors. The ability to design a good representation for a model is critical in doing good
    science and engineering. </font></li>
  <li><font face="Comic Sans MS"><b>Abstraction.</b> This is related to &quot;explicit
    representation&quot;. Software can be very specific or very general. Consider for example
    the sample program in ToonTalk which swaps two numbers when they the first is bigger than
    the second. When first constructed the program only works when the first number is 2 and
    the second one is 1. It is then abstracted to work for any two numbers where the first is
    larger than the second. It could have been abstracted so that it would work for words as
    well as numbers. If a word is alphabetically after another, then the robot would swap
    them. The ability to abstract when needed is a crucial thinking skill. ToonTalk is special
    in that it encourages children to work through concrete examples and then abstract the
    results. </font></li>
  <li><font face="Comic Sans MS"><b>Thinking about thinking.</b> Seymour Papert has written
    extensively about how the right programming environment can facilitate children thinking
    explicitly about how they solve problems. (See his books <em>Mindstorms</em>, <em>Children's
    Machine</em>, and <em>The Connected Family</em>.) If, for example, a child is trying to
    build a program to play tic-tac-toe, they are faced with questions of how the computer is
    going to decide which move to make. They need to think explicitly about how they make such
    decisions in order to program the computer to do so. Papert claims that one becomes a
    better learner and a better designer and a better problem-solver if one is able to
    explicitly reflect upon one's own thought processes. And this reflection is much more
    effective if one has some model of thinking skills like the list presented here. </font></li>
</ul>

<p><font face="Comic Sans MS">The argument for ToonTalk isn't that it, or even computer
programming in general, is unique in providing an environment for learning these thinking
skills. (Proponents of <a href="http://el.media.mit.edu/logo-foundation/">Logo</a>
make similar claims, for example.) But it is a very rich environment where these kinds of
thinking skills are &quot;exercised&quot; frequently in a natural context. And it is an
environment in which there are fewer hurdles to overcome (like a programming language
syntax or learning to play a musical instrument and to read music) before one begins to be
productive and learn. And it is a fun and appealing environment that maintains a child's
motivation very well. </font></p>

<p><font face="Comic Sans MS">Apropos Logo, <a href="logo.htm">a long discussion</a> of
the relative merits of ToonTalk and Logo was held on <a href="news:comp.lang.logo">comp.lang.logo</a> 
and <a href="logottabs.htm">a paper relating ToonTalk and Logo</a> was written.</font><em><font face="Comic Sans MS"> </font></em></p>

<p align="center"><small><font face="Comic Sans MS"><a href="toontalk.htm">
home</a> | <a href="search.htm">search</a> | <a href="buy.htm">purchase</a> | <a href="doc.htm">
manual</a> | <a href="whatsnew.htm">news</a> | <a href="infodesk.htm">info</a> | <a href="games.htm">
games</a> | <a href="faq.htm">faq</a> | <a href="support.htm">support</a> | <a href="free.htm">
downloads</a> | <a href="endorse.htm">endorsements</a> | <a href="press.htm">
press</a> | <a href="address.htm">contact us</a></font></small></p>
</body>
</html>