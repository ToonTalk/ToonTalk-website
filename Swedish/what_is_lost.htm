<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>What is lost?</title>
</head>

<body>

<p align="center"><b><font face="Comic Sans MS" size="5">Clearly much is gained 
by making computational abstractions concrete as ToonTalk does, but what is 
lost?</font></b></p>
<p><font face="Comic Sans MS">Let's consider an example. Suppose we want a robot 
that can take a stream of incoming objects and produce two outgoing streams each 
containing every other element. <a href="split.htm">Here</a> is a 
series of pictures of the training of such a robot.</font></p>
<p><font face="Comic Sans MS">Here's the equivalent robot in pseudo-code:</font></p>
<p><font face="Comic Sans MS">To Split In Out1 Out2</font></p>
<blockquote>
  <p><font face="Comic Sans MS">if In receives X then</font></p>
  <blockquote>
    <p><font face="Comic Sans MS">send X out on Out1 and</font></p>
    <p><font face="Comic Sans MS">Split In Out2 Out1</font></p>
  </blockquote>
</blockquote>
<p><font face="Comic Sans MS">end</font></p>
<p><font face="Comic Sans MS">I believe there are many children and adults that 
understand how the Split robot works and find the Split procedure perplexing. 
And maybe an even smaller proportion of those who can program the Split robot 
could construct the Split procedure.</font></p>
<p><font face="Comic Sans MS">But have those who can program the Split procedure 
lost something by using ToonTalk instead? One thing they may have lost is the 
ability to see &quot;at a glance&quot; what the program does without running it. The 
series of pictures <a href="split.htm">here</a> helps but currently there are no 
tools for producing them automatically. While ToonTalk can generate a 
description of a robot, it is often at too low a level.
<a href="../split_description.htm">Here</a> is the description of the Split robot 
that ToonTalk generates.</font></p>
<p><font face="Comic Sans MS">One answer to the question in the heading is that 
what is lost is only of value to those who are good at thinking using abstract 
formalisms. But what about those learners who aren't good at using abstract 
formalisms but may become so if they put in the effort to learn more abstract 
programming language?</font></p>
<p><font face="Comic Sans MS">Another answer is that the ideal language should 
support multiple representations that range from ToonTalk-like concretizations, 
to series of pictures, to symbolic representations. And the language should 
support the easy movement between these representations for the same program 
fragment.</font></p>
<p align="center">

<small><font face="Comic Sans MS"><a href="toontalk.htm">
home</a> | <a href="search.htm">search</a> | <a href="buy.htm">purchase</a> | <a href="doc.htm">
manual</a> | <a href="whatsnew.htm">news</a> | <a href="infodesk.htm">info</a> | <a href="games.htm">
games</a> | <a href="faq.htm">faq</a> | <a href="support.htm">support</a> | <a href="free.htm">
downloads</a> | <a href="endorse.htm">endorsements</a> | <a href="press.htm">
press</a> | <a href="address.htm">contact us</a></font></small><font size="5" face="Comic Sans MS"><b> </b></font>
<OBJECT id=AgentControl codeBase=#VERSION=2,0,0,0 classid=clsid:D45FD31B-5C6E-11D1-9EC1-00C04FD7081F VIEWASTEXT></OBJECT>

<SCRIPT language=javascript src="../agent.js"></SCRIPT>
<SCRIPT language=javascript src="strings.js"></SCRIPT>
<SCRIPT language=JavaScript event="Click(CharacterID, Button, Shift, X, Y)" for=AgentControl> 

<!-- 

reactToAgentClicked(CharacterID, Button, Shift, X, Y); 

--> </SCRIPT><SCRIPT language=JavaScript event=IdleStart(CharacterID) for=AgentControl> 

<!-- 

idleAgent(CharacterID); 

--> 

</SCRIPT>
<INPUT onclick=agentStart() type=image alt="Peedy can read this page for you." src="../reading.gif" name=Image1 width="58" height="51"></p>

</body>

</html>