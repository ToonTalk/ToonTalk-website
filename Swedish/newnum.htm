<html>	<head>		<meta http-equiv="content-type" content="text/html;charset=x-mac-roman">		<title>New Version of ToonTalk Numbers</title>	</head>	<body bgcolor="white">		<center>			<font size="6" face="Comic Sans MS"><b>New Version of ToonTalk Numbers</b></font></center>		<center>			<p><img src="../newnum.jpg" alt="newnum.jpg (11535 bytes)" width="479" height="70"></p>		</center>		<div align="left">			<p><font face="Comic Sans MS" size="3">This page describes many improvements were made to numbers beginning with beta 34 (or release version 2.50 or greater). <a href="number.htm">Click here</a> to read about the old version.</font></p>		</div>		<p><font face="Comic Sans MS"><strong>Arbitrarily large integers.</strong></font></p>		<p><font face="Comic Sans MS">This means that numbers behave as they should and not as they do in nearly every other programming language. In the earlier version of ToonTalk all numbers needed to be between 2147483647 and -2147483648. Now the only limit is the amount of memory need to store a number. Numbers with 100,000 digits work just fine however some operations may take a noticeable amount of time. Multiplying two 100,000 digit long numbers may <a href="slownumb.htm">freeze ToonTalk for a few seconds</a>.</font></p>		<p><font face="Comic Sans MS"><strong>Exact rational numbers.</strong></font></p>		<p><font face="Comic Sans MS">In the older version division always returned the quotient and threw away the remainder (though using % you can get the remainder). So dropping &quot;/3&quot; on &quot;4&quot; used to result in &quot;1&quot; while now it results in &quot;4/3&quot;. This is not approximated internally but is stored exactly with a numerator and denominator that can be as long as needed. For example, dropping &quot;*6&quot; on to &quot;4/3&quot; will result in exactly &quot;8&quot;.</font></p>		<p><font face="Comic Sans MS">A number like &quot;3/2&quot; can be displayed as either </font><img src="../throtwo.jpg" alt="throtwo.jpg (2127 bytes)" width="75" height="35"><font face="Comic Sans MS"> or <img src="../oneoneo2.jpg" alt="oneoneo2.jpg (2481 bytes)" width="125" height="35"> or </font><img src="../onept5.jpg" alt="onept5.jpg (1849 bytes)" width="74" height="35"><font face="Comic Sans MS">. At the beginning of the notebook on page 12 of your main notebook you'll find four styles of displaying rational numbers. They are</font></p>		<ol>			<li><font face="Comic Sans MS"><strong>Fraction.</strong> A numerator over a denominator where they have no common divisors and hence are as small as possible.</font>			<li><font face="Comic Sans MS"><strong>Integer followed by a proper fraction. </strong>The closest integer to the number (from zero) followed by a proper fraction. The sum of the integer and fraction is exactly the number.</font>			<li><font face="Comic Sans MS"><strong>Exact decimal or fraction if no exact decimal exists.</strong> Same as number 1 except it will display as a decimal number if it can do so exactly.</font>			<li><font face="Comic Sans MS"><strong>Exact decimal or an integer followed by a proper fraction if no exact decimal exists.</strong> Same as number 2 except it will display as a decimal number if it can do so exactly.</font>		</ol>		<p><font face="Comic Sans MS">You can use choose among the four sample numbers in the notebook on page 12 to control which format is used. Also if you erase one of these numbers and drop a number with a different format on top, it'll be converted to the format of the erased number.</font></p>		<p><font face="Comic Sans MS"><strong>Sensors and rational numbers.</strong></font></p>		<p><font face="Comic Sans MS">Most numeric sensors truncate whatever value they are given to an integer. The only exceptions are a picture's sensors for its <a href="remote.htm#XSensor">x and y position</a> and <a href="remote.htm#XSpeed">x and y speed</a>. These can now have fractional values. By default only the speed sensors display the exact value - the other sensors display their integer value. You can override this by adding &quot;<a href="command.htm#IntegerPositions">-integer_positions 0</a>&quot; to the command line.</font></p>		<p><font face="Comic Sans MS" size="2"><a name="BlankText"></a><i><b>ADVANCED USERS ONLY:</b></i> </font></p>		<p><font face="Comic Sans MS"><strong>Changes to operations.</strong></font></p>		<p><font face="Comic Sans MS">It has always worked in ToonTalk to pick up a number, say 5, and type '\' and it becomes '\5' which is the operation of dividing by 5. You can drop it any number and it'll divide that number by 5. But &quot;\5&quot; isn't really a number, it is an operation on numbers. To help make this distinction clear the color of operations is somewhat different from numbers. So &quot;\5&quot; looks like <img src="../divide5.jpg" alt="divide5.jpg (1347 bytes)" width="49" height="35">.</font></p>		<p><font face="Comic Sans MS"><a name="CompositeOperations."></a><strong>Composite operations.</strong> </font></p>		<p><font face="Comic Sans MS">What should happen if &quot;2&quot; is dropped on &quot;\5&quot;? The result in the old ToonTalk was &quot;\7&quot; as if you operating on the number part of the operation. Now the operations are concatenated so the result is <img src="../div5add2.jpg" alt="div5add2.jpg (2786 bytes)" width="152" height="35">. This is an operation that will divide by 5 and then add 2 to the result.</font></p>		<p><font face="Comic Sans MS"><strong>New Operations.</strong></font></p>		<p><font face="Comic Sans MS"><strong>Exponentiation</strong>. There is one new operation that you can type. It raises a number to a power. You can type &quot;^&quot; to any number to turn it into the power operation. For example dropping &quot;^3&quot; on to &quot;5&quot; will result in &quot;5x5x5&quot; or &quot;125&quot;. If the number is negative then the reciprocal of the result results. &quot;^-3&quot; on 5 results in &quot;1/125&quot; or &quot;.008&quot;. The exponent can be fractional as well to compute roots like square root. Dropping &quot;^1/2&quot; on 9 results in &quot;3&quot;. Dropping &quot;^3/2&quot; on &quot;9/4&quot; results in &quot;27/8&quot; since the square root is 3/2 and cubing that is 27/8.</font></p>		<p><font face="Comic Sans MS">Whenever ever possible ToonTalk will try to compute an exact result when taking a root of a number. When there is no rational root then an approximation is used. It is displayed in gray to indicate that it is an inexact number. (See below for more about inexact numbers.) For example, dropping &quot;^1/2&quot; on &quot;2&quot; will result in an inexact approximation of the square root of 2.</font></p>		<p><font face="Comic Sans MS">Calculating an odd root of a negative number should result in an imaginary number. It currently fails and Marty explains that some arithmetic couldn't be done.</font></p>		<p><font face="Comic Sans MS">In the notebook on page 12 you'll find the following new operations:</font></p>		<ol>			<li><font face="Comic Sans MS"><strong>Integer Part.</strong> Throws away the fractional part. Does nothing if the number is already an integer.</font>			<li><font face="Comic Sans MS"><strong>Fraction Part.</strong> Throws away the integer part. Becomes zero if the number is an integer and therefore has no fractional part.</font>			<li><font face="Comic Sans MS"><strong>Numerator.</strong> Becomes the numerator. Does nothing if the number is already an integer.</font>			<li><font face="Comic Sans MS"><strong>Denominator.</strong> Becomes the denominator. Becomes one if the number is an integer.</font>			<li><font face="Comic Sans MS"><strong>Sine.</strong> Becomes the sine of the number it is dropped on. It treats the number as an angle in degrees. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Cosine.</strong> Becomes the cosine of the number it is dropped on. It treats the number as an angle in degrees. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Tangent.</strong> Becomes the tangent of the number it is dropped on. It treats the number as an angle in degrees. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Arc Sine.</strong> Becomes the inverse sine in degrees of the number it is dropped on. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Arc Cosine.</strong> Becomes the inverse cosine in degrees of the number it is dropped on. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Arc Tangent.</strong> Becomes the inverse tangent in degrees of the number it is dropped on. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Natural Log.</strong> Becomes the natural log of the number it is dropped on. Currently always becomes an inexact value even when the value is rational.</font>			<li><font face="Comic Sans MS"><strong>Log Base 10.</strong> Becomes the log base 10 of the number it is dropped on. Currently always becomes an inexact value even when the value is rational.</font>		</ol>		<p><font face="Comic Sans MS"><strong><a name="OperatorsWithoutValues"></a>Operators without values.</strong> </font></p>		<p><font face="Comic Sans MS">All of the binary operations ('+','-','*','/','%', and '%') can be rubbed out (using the 'Backspace' key) so that the operation remains without any numbers. This can be given its first number value by dropping it on a number or by dropping a number on it. It then becomes an ordinary operation that can be dropped on another number.</font></p>		<p><font face="Comic Sans MS"><strong>Inexact numbers.</strong></font></p>		<p><font face="Comic Sans MS">The trigonometric operations above and the log operations produce inexact results. Sometimes the exponential operation also produce inexact results but only if the result is irrational. All other operations produce exact results if given exact inputs. ToonTalk represents these inexact results internally as 64-bit IEEE floating point numbers. Any operation where at least one of the numbers involved is inexact has an exact result. The only exception is the &quot;=&quot; operation that makes the number underneath equal to the one being dropped. In this case the exactness depends only upon the number with the &quot;=&quot; operation.</font></p>		<p><font face="Comic Sans MS">Tiny round-off errors are common and may accumulate. Inexact numbers work like ordinary numbers but are displayed in gray to remind you that they are inexact.</font></p>		<p><font face="Comic Sans MS">If you drop an inexact number on an erased exact number it'll be converted to the best equivalent rational number.</font></p>		<p><font face="Comic Sans MS"><strong>Bases.</strong></font></p>		<p><font face="Comic Sans MS">You can view or type numbers in any <a href="numbbase.htm">base between 2 and 36</a>.</font></p>		<p><font face="Comic Sans MS"><strong>Speed and memory issues.</strong></font></p>		<p><font face="Comic Sans MS">Very large integers and exact fractions can on occasion take a <a href="slownumb.htm">very long time</a> to compute or display.</font></p>		<p>&nbsp;</p>		<center>			<p><a href="toontalk.htm"><font face="Comic Sans MS" size="2">hem</font></a><font face="Comic Sans MS" size="2"> | <a href="search.htm">s&ouml;k</a> | <a href="buy.htm">k&ouml;p</a> | <a href="doc.htm">manual</a> | <a href="whatsnew.htm">nyheter</a> | <a href="infodesk.htm">info</a> | <a href="games.htm">spel</a> | <a href="faq.htm">fr&aring;gor</a> | <a href="support.htm">support</a> | <a href="free.htm">downloads</a> | <a href="endorse.htm">utm&auml;rkelser</a> | <a href="press.htm">press</a> | <a href="address.htm">kontakt</a></font></center>	</body></html>