<HTML>

<HEAD>

<TITLE>Schulung des Denkverm&ouml;gens mit ToonTalk</TITLE>


</HEAD>

<body bgcolor="#ffffff" text="#000000">

<P>
ToonTalk ist eine phantasievolle und spielerische Umgebung f&uuml;r Kinder
(aller Altersklassen), um eine Vielzahl von Fertigkeiten des Denkverm&ouml;gens 
zu schulen:
<UL>
<LI><B>Probleme zerlegen.</B> 
Sobald Kinder versuchen etwas Komplizierteres als ein einfaches
ToonTalk Programm zu bauen, sind sie mit der Aufgabe konfrontiert,
das Problem in kleinere &quot;Roboter-gro&szlig;e&quot;
(handhabbare) Teile aufzuspalten. 
Wenn das richtig gemacht wird, dann ist es einfach, jedes Teil 
einzeln zu
bauen oder zu programmieren. Das ist eine sehr generelle Fertigkeit,
die in allen Gebieten der allgemeinen Wissenschaften, 
Ingenieurswissenschaften und auch der Kunst Anwendung findet.
Zur L&ouml;sung gro&szlig;er Probleme gibt es immer ein hierarchisches Vorgehen,
wobei Probleme in Teilprobleme und diese wiederum in Teilprobleme
zerlegt werden.
<LI><B>Komponenten Zusammenf&uuml;gen.</B> 
Dies ist die zweite oder auch duale Aktivit&auml;t  zum Zerlegen von Problemen
in Teilprobleme.
Wenn man Teile hat, die f&uuml;r sich alleine arbeiten hei&szlig;t 
das noch lange nicht, da&szlig; es einfach ist sie 
zusammenzuf&uuml;gen.
Normalerweise m&uuml;&szlig;en die Beziehungen zwischen den Einzelteilen
oder Komponenten betrachtet 
werden. Komponenten k&ouml;nnen oft auf unterschiedliche Arten zusammengef&uuml;gt 
werden.
Auch das ist eine prinzipielle Vorgehensweise beim Entwurf und  L&ouml;sen
von Problemen. Unerwartete Schwierigkeiten f&uuml;hren oft dazu, da&szlig; 
die Zerlegung des Problems oft noch einmal &uuml;berdacht werden mu&szlig;.
Viele sind der Meinung, da&szlig; dies ein Spezialfall der 
generelleren Suche nach Fehlern (&quot;debugging&quot;) ist.
<LI><B>Explizite Repr&auml;sentation.</B> 
Ein Programm, das etwas modelliert wie zum Beispiel einen springenden Ball,
eine Entenfamilie, Stadtverkehr oder Beispiele aus der Umwelt, ben&ouml;tigt
Datenstrukturen. F&uuml;r einen Ball mu&szlig; ein Kind zum Beispiel eine
Struktur erzeugen, die Position, Geschwindigkeit und Flugrichtung
des Balls speichert. F&uuml;r eine Ente ist das zum Beispiel der Grad
des Hungers, Energie und die Repr&auml;sentation des Zustands verschiedener 
Sensoren. Von der F&auml;higkeit gute Repr&auml;sentationen bzw.
Abstraktionen zu entwerfen, 
h&auml;ngt der Erfolg von guten Entw&uuml;rfen in
der Konstruktion und anderer Wissenschaften ab.
<LI><B>Abstraktion.</B> 
Dieser Punkt h&auml;ngt eng mit &quot;expliziter Repr&auml;sentation&quot;
zusammen. Software kann sehr spezifisch oder sehr allgemein sein.
Als Beispiel betrachte man das ToonTalk Beispielprogramm, das zwei
Zahlen vertauscht, falls die erste Zahl gr&ouml;&szlig;er als die zweite ist.
In einem ersten Kontruktionsschritt arbeitet das
Programm nur mit dem Wert 2 als erster
und 1 als zweiter Zahl. Von dem Beispiel wird dann abstrahiert und
auf beliebige Zahlen, bei denen die erste gr&ouml;&szlig;er als die zweite ist,
&uuml;bertragen. In einem weiteren Abstraktionsschritt k&ouml;nnte das Programm
auch auf Text und Zahlen &uuml;bertragen werden.
Wenn dann ein Wort bez&uuml;glich der alphabetischen Ordnung gr&ouml;&szlig;er
als das andere ist, vertauscht der Roboter die W&ouml;rter.
Die F&auml;higkeit zum Abstrahieren, falls ben&ouml;tigt, stellt
eine wichtige Fertigkeit beim L&ouml;sen von Problemen dar.
ToonTalk unterst&uuml;tzt, da&szlig; Kinder konkrete Beispiele ausarbeiten
und dann die Ergebnisse abstrahieren.
<LI><B>&Uuml;ber das Denken nachdenken.</B> Seymour Papert schrieb viel
dar&uuml;ber wie geeignete Programmierumgebungen das Denken von
Kindern explizit unterst&uuml;tzen k&ouml;nnen, um Probleme zu l&ouml;sen
(siehe hierzu auch sein Buch &quot;Mindstorms, and Chidren's Machine&quot;).
Wenn zum Beispiel Kinder versuchen, ein Programm zu entwerfen, um
Tic-Tac-Toe zu spielen, kommen sie irgendwann zu dem Problem wie 
man entscheidet welcher Zug gemacht werden soll.
Sie m&uuml;ssen hier explizit &uuml;ber die Entscheidung nachdenken, bevor sie
den Computer programmieren den Zug durchzuf&uuml;hren.
Papert behauptet, da&szlig; man nur ein besserer Sch&uuml;ler, Konstrukteur und
Probleml&ouml;ser werden kann, wenn man explizit die eigenen Lernprozesse
reflektieren kann. Das ist viel einfacher, wenn ein Model des
strukturierten Denkens vorliegt, so wie es hier vorgestellt wird.
</UL>

<P>
Die Gr&uuml;nde, die f&uuml;r ToonTalk sprechen, sind nicht, da&szlig; ToonTalk oder
ganz allgemein das Programmieren von Computern die einzigen
Formen darstellen, um diese Art des strukturierten Denkens
zu erlernen
(die Erfinder von 
<A HREF="http://el.www.media.mit.edu/groups/el/"><FONT SIZE=2>Logo</FONT></A>
beanspruchen zum Beispiel &auml;hliches f&uuml;r sich),
vielmehr stellt ToonTalk eine  umfangreiche Umgebung zur Verf&uuml;gung,
in der diese Art des Denkens in nat&uuml;rlichem Umfeld
&quot;ge&uuml;bt&quot; werden kann.
In ToonTalk m&uuml;ssen auch weniger H&uuml;rden &uuml;berwunden werden
(wie z.B. beim Erlernen der Syntax einer Programmiersprache
oder das Spielen eines Musikinstruments), bevor man produktiv werden kann
und lernt. 
Schlie&szlig;lich ist ToonTalk eine Umgebung, die Spa&szlig; macht, ansprechend
ist und Kinder besser motiviert als andere Programmiersprachen.
<P>
<A href="toontalk.htm"><FONT SIZE=4>Zur&uuml;ck zur ToonTalk Homepage.</FONT></A>
<BR>

</BODY>

</HTML>
