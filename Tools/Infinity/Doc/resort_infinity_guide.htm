<html><!-- InstanceBegin template="/Templates/infinity.dwt" codeOutsideHTMLIsLocked="false" -->

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<!-- InstanceBeginEditable name="doctitle" -->
<title>WebLabs - Infinity Tools</title>
<!-- InstanceEndEditable --><!-- InstanceBeginEditable name="head" --><!-- InstanceEndEditable -->
<link href="../../toontalk.css" rel="stylesheet" type="text/css">
</head>

<body class="mainbody">
<table width="100%"  border="0">
  <tr>
    <td width="92%"><span class="title">Infinity Tools</span></td>
    <td width="8%"><span class="menu"><a href="/index.html"><img src="../../logos/logotron.gif" alt="Back to home page" width="55" height="53" border="0" align="right"></a></span></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2"><table width="100%"  border="0" bgcolor="#F48222">
      <tr class="menu">
        <td width="14%"><div align="center"><a href="../../Sequences/doc/index.htm">Sequences</a></div></td>
        <td width="14%"><div align="center"><a href="index.htm">Infinity</a></div></td>
        <td width="14%"><div align="center"><a href="../../Collisions/doc/index.htm">Collisions</a></div></td>
        <td width="14%"><div align="center"><a href="../../Lunar/doc/index.htm">Lunar Lander</a></div></td>
        <td width="14%"><div align="center"><a href="../../Eco/doc/index.htm">Randomness<br>
&amp; Ecologies</a></div></td>
        <td width="14%"><div align="center"><a href="../../RCX/doc/index.htm">LEGO<br>
          Mindstorms</a></div></td>
        <td width="14%"><div align="center"><a href="../../General/doc/index.htm">General Tools</a></div></td>
      </tr>
    </table>
      <table width="100%"  border="0" bgcolor="#000099">
        <tr>
          <td width="25%"><div align="center"><a href="resort_infinity.htm" class="menuWhite">Resort Infinity </a></div></td>
          <td width="25%"><div align="center"><a href="diagonal.htm" class="menuWhite">Diagonal tool </a></div></td>
          <td width="25%"><div align="center"><a href="no_copies.htm" class="menuWhite">Remove copies<br>
            of same fraction </a></div></td>
          <td width="25%">            <div align="center"><a href="../../Collisions/doc/guidance.htm" class="menuWhite">Teacher Guidance</a></div></td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2"><!-- InstanceBeginEditable name="mainbody" -->
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">




<p class="paragraphheading">Resort Infinity Guide</p>
<div class="stx">
  <span class="mainbody">This document provides some background and advice for using the
  <a href="resort_infinity.htm">Resort Infinity tool</a>.</span>
  <p class="mainbody">It is based upon David Hilbert's Hotel Infinity 
  story. A typical version of the story can be found
      <a href="http://scidiv.bcc.ctc.edu/Math/InfiniteHotel.html">here</a>.</p>
  <p class="mainbody">In&nbsp;ToonTalk it made more sense to make Resort Infinity where each guest 
  gets their own private cottage.</p>
  <p class="mainbody">Unlike most stories Resort Infinity starts out very finite -- zero cottages 
  and no guests. But then when you turn on the first problem (by pointing to it 
  and pressing space) an infinite number of guests arrive in a nest in a box. A 
  guest is just a picture of a guest with a label that let's you know the guest 
  number and group number. Every 5 seconds another one of the infinite guests 
  arrives by bird.</p>
  <p class="mainbody">The first task is to have cottages built for each guest. You solve this by 
  giving this box to the Solution bird:</p>
  <p>  <a href="../resort_infinity_task1.tt">
  <img src="../resort_infinity_task1.png" width="263" height="95"></a>
  </p>
  <p class="mainbody">It doesn't matter for the first problem what's in the first hole (nothing 
  is OK). The second hole of the second hole needs to be the nest where the 
  arriving guests are coming in. The Problem 1 nest in this case.</p>
  <p class="mainbody">Before giving this to the Solution bird, I recommend you try out the robot 
  to see what it does. This robot just gives the guest number to the bird -- 
  indicating that the address of guest i should be i.</p>
  <p class="mainbody">After this is given to the Solution bird, one should go outside to see if 
  all is OK. Trucks will be seen driving around and cottages being built. The 
  cottages are decorated with address number. If you go inside you'll find a box 
  with the guest in it. As you explore, more and more cottages are built for the 
  first infinite group of guests.</p>
  <p class="mainbody"><em>After solving a puzzle I recommend you save your city so you can go 
  back to an earlier version if mistakes are made later.</em></p>
  <p class="mainbody">The second problem is that 5 more guests have arrived. Where to put them? 
  Robots are busy arranging for all the guests in the first group to be put in 
  cottages 1, 2, 3, and so on.</p>
  <p class="mainbody">Hints are available by flipping over hint text pads. Like Russian dolls 
  these hints might contain hints that contain hints and so on.</p>
  <p class="mainbody">The solution to the second problem is to broadcast an announcement to all 
  the guests to move to a new cottage whose address is 5 greater than the 
  current address. And then the 5 guests can be given cottages 1, 2, 3, 4, and 
  5. The box for doing this looks like this:</p>
  <p>  <a href="../resort_infinity_task2.tt">
  <img src="../resort_infinity_task2.png" width="263" height="95"></a>
  <br>
  <br>
  <span class="mainbody">The empty hole should be filled with the nest of Problem 2.</span></p>
  <p class="mainbody">It is fun to press F8, give the Solution bird this box,&nbsp;and then go outside 
  to watch houses blowing up and being built.</p>
  <p class="mainbody">Check out a house less than 6 and one greater than 5 to see the labels of 
  the guests to see that all worked as it should.</p>
  <p class="mainbodyitalic"><em>Save your city.</em></p>
  <p class="mainbody">Problem 3 is that a new infinite group of guests has arrived. I found that 
  if student is stumped a good hint is to suggest that the move robot maybe 
  should do something other than adding. The most economical solution is to 
  train a &quot;move&quot; robot that doubles the address. The build robot then puts the 
  new guests in odd cottages by computing 2i-1.</p>
  <p class="mainbody">Note that other solutions will leave some addresses unoccupied. A harder 
  version of these problems is to add constraints such as no unoccupied 
  addresses and to minimize the number of times guests are asked to move.</p>
  <p class="mainbody">Problem 4 is that 3 groups of infinite guests arrive. The expected solution 
  is the move each guest from i to 4i and to assign the new guests to 4i-j 
  (where j is the group number). Note that there are other interesting 
  solutions. One is to repeat the solution to problem 3 three times. Another is 
  to use a Merge robot (that combines two sequences into one) to combine two 
  infinite streams of guests into one and then use another Merge robot to 
  combine the result and the third stream of guests.</p>
  <p class="mainbody">Problem 5 is that an infinite number of infinite groups of guests arrive. 
  The classic solution is to move existing guests from i to 2<sup>i</sup> and 
  then assign each incoming group to successive primes and put each guest in the 
  i<sup>th</sup> power of the j<sup>th</sup> prime. This is rather wasteful 
  (lots of empty lots) and is a bit hard to compute -- though probably a 
  worthwhile exercise.</p>
  <p class="mainbody">In <a href="http://www.timesonline.co.uk/article/0,,2102-1435571,00.html">
  The Infinite Book by John Barrow</a>&nbsp;he presents a solution that is more 
  economical. Yishay Mor also proposed a similar solution. If you picture each 
  infinite group of guests as a row then you can enumerate the grid by diagonals 
  (Yishay) or growing squares (Barrow). Barrow assigns the next (odd) address to 
  1,1, then 2,1 then 2,2 then 1,2 then 3,1 then 3,2 then 3,3 then 2,3 then 1,3. 
  (Vertical line and then horizontal line.) Yishay proposed 1,1 then 2,1 then 
  1,2 then 3,1 then 2,2 then 1,3 which is how one traditionally enumerates the 
  rational numbers (just replace , with / above).</p>
  <p class="mainbody">While there probably is a nice functional description of Yishay's solution 
  I followed Barrow where</p>
  <p class="mainbody">if i less than or equal to j then</p>
  <p class="mainbody">&nbsp;&nbsp; j<sup>2</sup>-(i-1)</p>
  <p class="mainbody">while if i greater than or equal to j then</p>
  <p class="mainbody">&nbsp; (i-1)<sup>2</sup>+j.</p>
  <p><span class="mainbody">(They produce the same number with i=j.)</span><br>
<br>
</div>
<!-- InstanceEndEditable --></td>
  </tr>
</table>
</body>

<!-- InstanceEnd --></html>