// This Java file was automatically generated by ToonTalk for April 24
import ap.toontalk.*;
  // Robot906_785342594: Recip
class Robot906_785342594 extends TTRobot {
 Robot906_785342594(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  // move to the stack of numbers
  temp1 = new TTNumber(1);
  // pick up a number
  hand = temp1;
  // drop it
  temp1 = hand;
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the first hole inside his box
  hand = copier.applyTo(given.hole(0), this);
  temp2 = hand;
  // push '/' to change what he is holding
  hand.keyboard('/', false);
  hand.stoppedTyping();
  // drop what he just copied on the new number
  temp1.gets(hand);
  // release the magic wand
  // pick up the new number
  hand = temp1;
  // give it to the bird in the second hole inside his box
  given.hole(1).gets(hand);
  // move to the stack of numbers
  temp3 = new TTNumber(1);
  // pick up a number
  hand = temp3;
  // drop it on the first hole inside his box
  given.holeGets(0, hand);
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot719_36974814: Add up
class Robot719_36974814 extends TTRobot {
 Robot719_36974814(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // pick up what's in the first hole inside his box
  hand = given.pickUp(0);
  // drop it on the second hole inside his box
  given.holeGets(1, hand);
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the second hole inside his box
  hand = copier.applyTo(given.hole(1), this);
  // give what he just copied to the bird in the third hole inside his box
  given.hole(2).gets(hand);
  // release the magic wand
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot743_40390886: New bar for New Data
class Robot743_40390886 extends TTRobot {
 Robot743_40390886(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum what's in the first hole inside his box
  vacuum.suckUp(given.hole(0));
  given.vacuumedHole(0, vacuum);
  // release Dusty
  // move to the stack of numbers
  temp1 = new TTNumber(1);
  // pick up a number
  hand = temp1;
  // give it to the bird in the second hole inside his box
  given.hole(1).gets(hand);
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot578_2516558850: Parts Count
class Robot578_2516558850 extends TTRobot {
 Robot578_2516558850(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  // move to the stack of boxes
  temp1 = new TTBox(1);
  // pick up a box
  hand = temp1;
  // push '2' to change what he is holding
  hand.keyboard('2', false);
  hand.stoppedTyping();
  // drop it just right of his box
  given.sideGets(hand, true);
  // move to the stack of scales
  temp2 = new TTScale('?');
  // pick up a scale
  hand = temp2;
  // drop it on the fourth hole inside his box
  given.holeGets(3, hand);
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum the remote control in the second hole of his box
  vacuum.suckUp(given.hole(1).findOnBack(TT.A_REMOTE_CONTROL, false));
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // run Dusty in reverse to restore
  temp3 = vacuum.spitOut();
  // release Dusty
  // move to the stack of numbers
  temp4 = new TTNumber(1);
  // pick up a number
  hand = temp4;
  // drop it
  temp4 = hand;
  // grab a copy of Dusty
  hand = vacuum;
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // use Dusty to vacuum the new number
  vacuum.suckUp(temp4);
  // release Dusty
  // pick up the third thing he made or found
  temp3 = temp3;
  hand = temp3;
  // drop it on the new number
  temp3 = temp4.gets(hand);
  // pick up the new number
  hand = temp4;
  // drop it on the fifth hole inside his box
  given.holeGets(4, hand);
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot595_2277162016: Set Height
class Robot595_2277162016 extends TTRobot {
 Robot595_2277162016(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  TTObject temp5;
  TTObject temp6;
  TTObject temp7;
  TTObject temp8;
  TTObject temp9;
  TTObject temp10;
  TTObject temp11;
  // pick up his box
  hand = given;
  // push '3' while pointing to his box
  temp1 = given.keyboard('3', false);
  given.stoppedTyping();
  // drop it
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  temp1 = hand;
  // drop it
  temp2 = hand;
  // release the magic wand
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum the remote control in the second hole of his box
  vacuum.suckUp(given.hole(1).findOnBack(TT.A_REMOTE_CONTROL, false));
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // run Dusty in reverse to restore
  temp3 = vacuum.spitOut();
  // release Dusty
  // pick up the third thing he made or found
  temp3 = temp3;
  hand = temp3;
  // drop it on the second thing he made or found
  temp4 = temp2.gets(hand);
  // pick up what's in the first hole inside the newest box
  hand = temp4.pickUp(0);
  // use it
  temp5 = TTNotebook.getLocalRemotesNotebook();
  temp5.setControlee(hand);
  hand.use();
  // drop it
  temp6 = hand;
  // push the space bar after moving to the new notebook
  temp5.keyboard(' ', true);
  temp5.stoppedTyping();
  // pick up what's on the right page of the new notebook
  temp7 = temp5.pickUp(1);
  hand = temp7;
  // drop it
  temp7 = hand;
  // push the space bar after moving to the new notebook
  temp5.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp5.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp5.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp5.keyboard(' ', true);
  temp5.stoppedTyping();
  // pick up what's on the right page of the new notebook
  temp8 = temp5.pickUp(1);
  hand = temp8;
  // drop it
  temp8 = hand;
  // pick up the sixth thing he made or found
  hand = temp6;
  // use it
  hand.use();
  // drop it
  temp6 = hand;
  // grab a magic wand
  hand = copier;
  // use the magic wand on the first hole inside his box
  hand = copier.applyTo(given.hole(0), this);
  temp9 = hand;
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop what he just copied on the first hole inside the newest box
  temp8.holeGets(0, hand);
  // release the magic wand
  // move to the stack of numbers
  temp10 = new TTNumber(1);
  // pick up a number
  hand = temp10;
  // push Backspace key to change what he is holding
  hand.keyboard('\b', false);
  // push '2' to change what he is holding
  hand.keyboard('2', false);
  // push '/' to change what he is holding
  hand.keyboard('/', false);
  hand.stoppedTyping();
  // drop it on the first hole inside his box
  given.holeGets(0, hand);
  // pick up the newest box
  hand = temp7;
  // drop it
  temp7 = hand;
  // pick up what's in the first hole inside his box
  hand = given.pickUp(0);
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop it on the first hole inside the newest box
  temp7.holeGets(0, hand);
  // pick up the newest box
  hand = temp8;
  // drop it
  temp8 = hand;
  // move to the stack of numbers
  temp11 = new TTNumber(1);
  // pick up a number
  hand = temp11;
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  // grab a copy of Dusty
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp1);
  // use Dusty to vacuum the second thing he made or found
  vacuum.suckUp(temp2);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp3);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp4);
  // use Dusty to vacuum the sixth thing he made or found
  vacuum.suckUp(temp6);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp7);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp8);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot580_318996573: Wait for more parts
class Robot580_318996573 extends TTRobot {
 Robot580_318996573(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // pick up his box
  hand = given;
  // push '3' while pointing to his box
  temp1 = given.keyboard('3', false);
  given.stoppedTyping();
  // drop it
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the new box
  vacuum.suckUp(temp1);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot596_3896385655: Reset
class Robot596_3896385655 extends TTRobot {
 Robot596_3896385655(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // move to the stack of numbers
  temp1 = new TTNumber(1);
  // pick up a number
  hand = temp1;
  // push Backspace key to change what he is holding
  hand.keyboard('\b', false);
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum what's in the first hole inside his box
  vacuum.suckUp(given.hole(0));
  given.vacuumedHole(0, vacuum);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot758_36602080: Change Default
class Robot758_36602080 extends TTRobot {
 Robot758_36602080(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum what's in the second hole inside his box
  vacuum.suckUp(given.hole(1));
  given.vacuumedHole(1, vacuum);
  // release Dusty
  // pick up what's in the second hole inside the third hole of his box
  hand = given.hole(2).pickUp(1);
  // drop it on the second hole inside his box
  given.holeGets(1, hand);
  // grab a copy of Dusty
  hand = vacuum;
  // use Dusty to vacuum what's in the third hole inside his box
  vacuum.suckUp(given.hole(2));
  given.vacuumedHole(2, vacuum);
  // release Dusty
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot757_1569398983: Add 1 of these
class Robot757_1569398983 extends TTRobot {
 Robot757_1569398983(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the second hole inside the third hole of his box
  hand = copier.applyTo(given.hole(2).hole(1), this);
  // drop what he just copied on the first hole inside his box
  given.holeGets(0, hand);
  // release the magic wand
  // move to the stack of numbers
  temp2 = new TTNumber(1);
  // pick up a number
  hand = temp2;
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  hand.stoppedTyping();
  // drop it on the first hole inside the third hole of his box
  given.hole(2).holeGets(0, hand);
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot695_38027435: Stop Adding
class Robot695_38027435 extends TTRobot {
 Robot695_38027435(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum what's in the third hole inside his box
  vacuum.suckUp(given.hole(2));
  given.vacuumedHole(2, vacuum);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot694_1569398975: Add to Picture
class Robot694_1569398975 extends TTRobot {
 Robot694_1569398975(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the second hole inside his box
  hand = copier.applyTo(given.hole(1), this);
  // drop what he just copied on the first hole inside his box
  given.holeGets(0, hand);
  // release the magic wand
  // move to the stack of numbers
  temp2 = new TTNumber(1);
  // pick up a number
  hand = temp2;
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  hand.stoppedTyping();
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot756_1367318734: Scale 0 to 1000
class Robot756_1367318734 extends TTRobot {
 Robot756_1367318734(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  TTObject temp5;
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  temp1 = hand;
  // drop it
  temp1 = hand;
  // use the magic wand on the second hole inside his box
  hand = copier.applyTo(given.hole(1), this);
  temp2 = hand;
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  hand.stoppedTyping();
  // drop what he just copied on the first thing he made or found
  temp1.gets(hand);
  // use the magic wand on the second hole inside his box
  hand = copier.applyTo(given.hole(1), this);
  temp3 = hand;
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  hand.stoppedTyping();
  // drop what he just copied on the first hole inside his box
  given.holeGets(0, hand);
  // release the magic wand
  // pick up what's in the first hole inside his box
  hand = given.pickUp(0);
  // drop it
  temp4 = hand;
  // pick up the first thing he made or found
  hand = temp1;
  // push '/' to change what he is holding
  hand.keyboard('/', false);
  hand.stoppedTyping();
  // drop it on the second to last thing he made or found
  temp4.gets(hand);
  // move to the stack of numbers
  temp5 = new TTNumber(1);
  // pick up a number
  hand = temp5;
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  // push '*' to change what he is holding
  hand.keyboard('*', false);
  hand.stoppedTyping();
  // drop it on the second to last thing he made or found
  temp4.gets(hand);
  // pick up the second to last thing he made or found
  hand = temp4;
  // give it to the bird in the fourth hole inside his box
  given.hole(3).gets(hand);
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot583_3550059522: Count Parts
class Robot583_3550059522 extends TTRobot {
 Robot583_3550059522(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  // move to the stack of boxes
  temp1 = new TTBox(1);
  // pick up a box
  hand = temp1;
  // push '2' to change what he is holding
  hand.keyboard('2', false);
  hand.stoppedTyping();
  // drop it just right of his box
  given.sideGets(hand, true);
  // move to the stack of scales
  temp2 = new TTScale('?');
  // pick up a scale
  hand = temp2;
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  // move to the stack of numbers
  temp3 = new TTNumber(1);
  // pick up a number
  hand = temp3;
  // drop it
  temp3 = hand;
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // use Dusty to vacuum the new number
  vacuum.suckUp(temp3);
  // release Dusty
  // grab a copy of Dusty
  hand = vacuum;
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  // push '-' to change what he is holding
  hand.keyboard('-', false);
  hand.stoppedTyping();
  // use Dusty to vacuum the remote control in the first hole of his box
  vacuum.suckUp(given.hole(0).findOnBack(TT.A_REMOTE_CONTROL, false));
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // run Dusty in reverse to restore
  temp4 = vacuum.spitOut();
  // release Dusty
  // pick up the last thing he made or found
  temp4 = temp4;
  hand = temp4;
  // drop it on the new number
  temp4 = temp3.gets(hand);
  // pick up the new number
  hand = temp3;
  // drop it on the fourth hole inside his box
  given.holeGets(3, hand);
  return this;  // This robot has finished and will see if the box still matches his thoughts and try again.
 }
}
  // Robot589_461602900: Wait for change
class Robot589_461602900 extends TTRobot {
 Robot589_461602900(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // pick up his box
  hand = given;
  // push '2' while pointing to his box
  temp1 = given.keyboard('2', false);
  given.stoppedTyping();
  // drop it
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the new box
  vacuum.suckUp(temp1);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot592_461602889: Don't Divide by zero
class Robot592_461602889 extends TTRobot {
 Robot592_461602889(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // pick up his box
  hand = given;
  // push '2' while pointing to his box
  temp1 = given.keyboard('2', false);
  given.stoppedTyping();
  // drop it
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the new box
  vacuum.suckUp(temp1);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot887_3543244345: Prepare Parts
class Robot887_3543244345 extends TTRobot {
 Robot887_3543244345(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  TTObject temp5;
  TTObject temp6;
  TTObject temp7;
  TTObject temp8;
  TTObject temp9;
  TTObject temp10;
  // pick up his box
  hand = given;
  // push '2' while pointing to his box
  temp1 = given.keyboard('2', false);
  given.stoppedTyping();
  // drop it
  // pick up what's in the second hole inside the new box
  hand = temp1.pickUp(1);
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop it on the second hole inside his box
  given.holeGets(1, hand);
  // move to the stack of boxes
  temp2 = new TTBox(1);
  // pick up a box
  hand = temp2;
  // drop it just right of his box
  given.sideGets(hand, true);
  // move to the stack of numbers
  temp3 = new TTNumber(1);
  // pick up a number
  hand = temp3;
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  // push '0' to change what he is holding
  hand.keyboard('0', false);
  hand.stoppedTyping();
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the second hole inside his box
  hand = copier.applyTo(given.hole(1), this);
  temp4 = hand;
  // push '/' to change what he is holding
  hand.keyboard('/', false);
  hand.stoppedTyping();
  // drop what he just copied on the third hole inside his box
  given.holeGets(2, hand);
  // release the magic wand
  // move to the stack of numbers
  temp5 = new TTNumber(1);
  // pick up a number
  hand = temp5;
  // push Backspace key to change what he is holding
  hand.keyboard('\b', false);
  // push '2' to change what he is holding
  hand.keyboard('2', false);
  // push '/' to change what he is holding
  hand.keyboard('/', false);
  hand.stoppedTyping();
  // drop it on the third hole inside his box
  given.holeGets(2, hand);
  // move to the stack of boxes
  temp6 = new TTBox(1);
  // pick up a box
  hand = temp6;
  // push '2' to change what he is holding
  hand.keyboard('2', false);
  hand.stoppedTyping();
  // drop it just right of his box
  given.sideGets(hand, true);
  // grab a magic wand
  hand = copier;
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  // drop what he just copied on the fifth hole inside his box
  given.holeGets(4, hand);
  // release the magic wand
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // use Dusty to vacuum the remote control in the first hole of his box
  vacuum.suckUp(given.hole(0).findOnBack(TT.A_REMOTE_CONTROL, false));
  // push '+' to change what he is holding
  hand.keyboard('+', false);
  hand.stoppedTyping();
  // run Dusty in reverse to restore
  temp8 = vacuum.spitOut();
  // release Dusty
  // pick up the third to last thing he made or found
  hand = temp8;
  // drop it
  temp8 = hand;
  // move to the stack of nests
  temp9 = new TTNest();
  // pick up a nest
  hand = temp9;
  temp10 = new TTBird();
  temp10.setNest(hand);
  // drop it on the fourth hole inside his box
  given.holeGets(3, hand);
  // pick up the third to last thing he made or found
  hand = temp8;
  // drop it on the fourth hole inside his box
  given.holeGets(3, hand);
  // grab a copy of Dusty
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp1);
  // use Dusty to vacuum the new bird
  vacuum.suckUp(temp10);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot588_461602901: Get Ready for new parts
class Robot588_461602901 extends TTRobot {
 Robot588_461602901(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  // pick up his box
  hand = given;
  // push '2' while pointing to his box
  temp1 = given.keyboard('2', false);
  given.stoppedTyping();
  // drop it
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the new box
  vacuum.suckUp(temp1);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
  // Robot587_1451860041: Spread Out
class Robot587_1451860041 extends TTRobot {
 Robot587_1451860041(TTNotebook n) {
  notebook = n;
 }
 public TTObject gets(TTObject given) throws TTException {
  if (!wants.matches(given)) return null;
  // If given a box that matches the box in his thought bubble (called "wants"),
  // this robot will do the following:
  TTObject hand;
  TTObject temp1;
  TTObject temp2;
  TTObject temp3;
  TTObject temp4;
  TTObject temp5;
  TTObject temp6;
  TTObject temp7;
  TTObject temp8;
  TTObject temp9;
  TTObject temp10;
  // pick up what's in the fourth hole inside his box
  hand = given.pickUp(3);
  // push '1' to change what he is holding
  temp1 = hand.keyboard('1', false);
  hand.stoppedTyping();
  // drop it
  temp2 = hand;
  // pick up the new box
  hand = temp1;
  // drop it on the fourth hole inside his box
  given.holeGets(3, hand);
  // pick up what's in the first hole inside the second thing he made or found
  hand = temp2.pickUp(0);
  // use it
  temp3 = TTNotebook.getLocalRemotesNotebook();
  temp3.setControlee(hand);
  hand.use();
  // drop it
  temp4 = hand;
  // pick up what's on the right page of the new notebook
  temp5 = temp3.pickUp(1);
  hand = temp5;
  // drop it
  temp5 = hand;
  // push the space bar after moving to the new notebook
  temp3.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp3.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp3.keyboard(' ', true);
  // push the space bar after moving to the new notebook
  temp3.keyboard(' ', true);
  temp3.stoppedTyping();
  // pick up what's on the right page of the new notebook
  temp6 = temp3.pickUp(1);
  hand = temp6;
  // drop it
  temp6 = hand;
  // pick up the fourth thing he made or found
  hand = temp4;
  // use it
  hand.use();
  // drop it
  temp4 = hand;
  // grab a magic wand
  TTCopier copier = new TTCopier();
  hand = copier;
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  temp7 = hand;
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop what he just copied on the first hole inside the newest box
  temp6.holeGets(0, hand);
  // use the magic wand on the fifth hole inside his box
  hand = copier.applyTo(given.hole(4), this);
  temp8 = hand;
  // push '=' to change what he is holding
  hand.keyboard('=', false);
  hand.stoppedTyping();
  // drop what he just copied on the first hole inside the newest box
  temp5.holeGets(0, hand);
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  // drop what he just copied on the fifth hole inside his box
  given.holeGets(4, hand);
  // use the magic wand on the third hole inside his box
  hand = copier.applyTo(given.hole(2), this);
  // drop what he just copied on the fifth hole inside his box
  given.holeGets(4, hand);
  // release the magic wand
  // grab a copy of Dusty
  TTVacuum vacuum = new TTVacuum();
  hand = vacuum;
  // push '1' while pointing to Dusty
  vacuum.keyboard('1', false);
  vacuum.stoppedTyping();
  // use Dusty to vacuum the second thing he made or found
  vacuum.suckUp(temp2);
  // use Dusty to vacuum the fourth thing he made or found
  vacuum.suckUp(temp4);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp5);
  // use Dusty to vacuum the newest box
  vacuum.suckUp(temp6);
  // release Dusty
  return this;  // This robot has finished and will give the box to the first robot to try again.
 }
}
public class HarmonicSeries extends TTApplet {
 public static void main(String args[]) {
  new TTFrame().begin(new HarmonicSeries());
 }
 public void initialize() {
  intializeToonTalkImages();
  intializeNests();
  TTNotebook notebook = TT.NOTEBOOK;
  TTRobot next_robot;
  TTPicture picture2 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 255, 0, 255, false, true, false);
  setPicture(picture2);
    picture2.addPicture(HarmonicSeries.PicturePart1(notebook, picture2));
    picture2.addPicture(HarmonicSeries.PicturePart1(notebook, picture2).resetGeometry(750, 75, 250, 150, 0, 0));
    TTBox box3 = new TTBox(3);
    box3.setHole(0, new TTNumber(3, TT.NO_NUMBER_OPERATION, 0, 0, 0));
    box3.setHole(1, new TTBird());
    box3.hole(1).setNest(nest0);
    box3.setHole(2, new TTRemotePicture(0, null, TT.NO_NUMBER_OPERATION, TT.KEYBOARD_BUTTON_REMOTE, TT.GLOBAL_REMOTE, TT.AMERICAN_ENGLISH));
    // We just made a box with 3 holes. The first hole contains the integer 3. 
    // The second hole contains a bird. The third hole contains a remote control 
    // for the key just pressed.
    TTRobot robot4 = new Robot906_785342594(notebook);
    TTBox box5 = new TTBox(3);
    TTBox wants1 = box5;
    // This robot will only accept a box with 3 holes. The first hole contains 
    // any number. The second hole contains a bird. The third hole contains a pad 
    // with the text " " on it.
    wants1.setHole(0, TT.BLANK_NUMBER);
    wants1.setHole(1, new TTBird());
    wants1.setHole(2, new TTText(" "));
    robot4.setWants(wants1);
    TTTeam team4 = new TTTeam(box3, robot4);
    picture2.addTeam(team4);
    TTBox box6 = new TTBox(3);
    box6.setHole(0, nest0);
    box6.setHole(1, new TTNumber("3/2", TT.NO_NUMBER_OPERATION, 0, 0, 0));
    box6.setHole(2, new TTBird());
    box6.hole(2).setNest(nest1);
    box6.hole(2).setNest(nest2);
    // We just made a box with 3 holes. The hole labeled with "in" contains an 
    // empty nest. The hole labeled with "so far" contains the rational number 
    // 3/2. The hole labeled with "out" contains a bird.
    TTRobot robot7 = new Robot719_36974814(notebook);
    TTBox box8 = new TTBox(3);
    TTBox wants2 = box8;
    // This robot will only accept a box with 3 holes. The hole labeled with "in" 
    // contains any number. The hole labeled with "so far" contains any number. 
    // The hole labeled with "out" contains a bird.
    wants2.setHole(0, TT.BLANK_NUMBER);
    wants2.setHole(1, TT.BLANK_NUMBER);
    wants2.setHole(2, new TTBird());
    robot7.setWants(wants2);
    TTTeam team7 = new TTTeam(box6, robot7);
    picture2.addTeam(team7);
    TTObject temp0 = new TTText("HarmonicSeries");
    picture2.addOnBack(temp0);
    TTObject temp1 = new TTText("Type space to add the next\rfraction to total.");
    picture2.addOnBack(temp1);
    picture2.addOnBack(HarmonicSeries.PicturePart2(notebook, picture2));
  picture2.start();
  screen_snapshot_file_name = "HarmonicSeries.gif";
 }
  public static TTPicture PicturePart1(TTNotebook notebook, TTPicture container) { 
    TTPicture picture9 = new TTRectangle(250, 50, 250, 100, 0, 0, 0, 255, 0, false, true, false);
    return picture9;
  }
  public static TTPicture PicturePart2(TTNotebook notebook, TTPicture container) { 
    TTPicture picture10 = new TTRectangle(500, 500, 473, 472, 0, 0, 240, 232, 152, false, true, true);
      picture10.addOnBack(HarmonicSeries.PicturePart3(notebook, picture10));
      picture10.addOnBack(HarmonicSeries.PicturePart4(notebook, picture10));
      picture10.addOnBack(HarmonicSeries.PicturePart5(notebook, picture10));
      picture10.addOnBack(HarmonicSeries.PicturePart6(notebook, picture10));
      picture10.addOnBack(HarmonicSeries.PicturePart7(notebook, picture10));
      TTObject temp2 = new TTText("Graphing Tool");
      picture10.addOnBack(temp2);
    return picture10;
  }
  public static TTPicture PicturePart3(TTNotebook notebook, TTPicture container) { 
    TTPicture picture11 = new TTRectangle(500, 500, 103, 103, 0, 0, 255, 0, 255, false, true, true);
      TTBox box12 = new TTBox(2);
      box12.setHole(0, nest2);
      box12.setHole(1, new TTBird());
      box12.hole(1).setNest(nest3);
      // We just made a box with 2 holes. The hole labeled with "Data in" contains 
      // an empty nest. The hole labeled with "Add item" contains a bird.
      TTRobot robot13 = new Robot743_40390886(notebook);
      TTBox box14 = new TTBox(2);
      TTBox wants3 = box14;
      // This robot will only accept a box with 2 holes. The hole labeled with 
      // "Next Height" contains any number. The hole labeled with "Count" contains 
      // a bird.
      wants3.setHole(0, TT.BLANK_NUMBER);
      wants3.setHole(1, new TTBird());
      robot13.setWants(wants3);
      TTTeam team13 = new TTTeam(box12, robot13);
      picture11.addTeam(team13);
      picture11.addOnBack(HarmonicSeries.PicturePart8(notebook, picture11));
    return picture11;
  }
  public static TTPicture PicturePart4(TTNotebook notebook, TTPicture container) { 
    TTPicture picture15 = new TTRectangle(500, 500, 104, 104, 0, 0, 255, 255, 0, false, true, true);
      picture15.addPicture(HarmonicSeries.PicturePart9(notebook, picture15));
      picture15.addPicture(HarmonicSeries.PicturePart10(notebook, picture15));
      TTObject temp3 = new TTText("I change the height of my parts\ras numbers arrive on the nest.\rIf I get X I'll start over\rwith the first of my parts.\r");
      picture15.addOnBack(temp3);
      TTBox box16 = new TTBox(3);
      box16.setHole(0, nest4);
      box16.setHole(1, new TTRemotePicture(0, null, TT.NO_NUMBER_OPERATION, TT.CHILDREN_REMOTE, picture15, TT.AMERICAN_ENGLISH));
      box16.setHole(2, new TTNumber(2, TT.NO_NUMBER_OPERATION, 0, 0, 0));
      // We just made a box with 3 holes. The hole labeled with "Next Height" 
      // contains an empty nest. The hole labeled with "Parts" contains a remote 
      // control for the answer to the question "What pictures are stuck on top of 
      // me?".
      TTRobot robot17 = new Robot578_2516558850(notebook);
      TTBox box18 = new TTBox(3);
      TTBox wants4 = box18;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Next Height" contains any number. The hole labeled with "Parts" contains 
      // any picture (for example, a remote control for the answer to the question 
      // "What pictures are stuck on top of me?"). The hole labeled with "Next 
      // Part" contains any number.
      wants4.setHole(0, TT.BLANK_NUMBER);
      wants4.setHole(1, TT.BLANK_BOX);
      wants4.setHole(2, TT.BLANK_NUMBER);
      robot17.setWants(wants4);
      TTTeam team17 = new TTTeam(box16, robot17);
      TTRobot robot19 = new Robot595_2277162016(notebook);
      TTBox box20 = new TTBox(5);
      TTBox wants5 = box20;
      // This robot will only accept a box with 5 holes. The hole labeled with 
      // "Next Height" contains any number. The hole labeled with "Parts" contains 
      // any picture (for example, a remote control for the answer to the question 
      // "What pictures are stuck on top of me?"). The hole labeled with "Next 
      // Part" contains any number. The fourth hole contains a scale tipped to the 
      // right. The fifth hole contains any number.
      wants5.setHole(0, TT.BLANK_NUMBER);
      wants5.setHole(1, TT.BLANK_BOX);
      wants5.setHole(2, TT.BLANK_NUMBER);
      wants5.setHole(3, new TTScale('<'));
      wants5.setHole(4, TT.BLANK_NUMBER);
      robot19.setWants(wants5);
      robot17.setNextRobot(robot19);
      TTRobot robot22 = new Robot580_318996573(notebook);
      TTBox box23 = new TTBox(5);
      TTBox wants6 = box23;
      // This robot will only accept a box with 5 holes. The hole labeled with 
      // "Next Height" contains any number. The hole labeled with "Parts" contains 
      // any picture (for example, a remote control for the answer to the question 
      // "What pictures are stuck on top of me?"). The hole labeled with "Next 
      // Part" contains any number. The fourth hole contains a balanced scale. The 
      // fifth hole contains any number.
      wants6.setHole(0, TT.BLANK_NUMBER);
      wants6.setHole(1, TT.BLANK_BOX);
      wants6.setHole(2, TT.BLANK_NUMBER);
      wants6.setHole(3, new TTScale('='));
      wants6.setHole(4, TT.BLANK_NUMBER);
      robot22.setWants(wants6);
      robot19.setNextRobot(robot22);
      TTRobot robot25 = new Robot596_3896385655(notebook);
      TTBox box26 = new TTBox(3);
      TTBox wants7 = box26;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Next Height" contains a text pad with anything on it. The hole labeled 
      // with "Parts" contains any picture (for example, a remote control for the 
      // answer to the question "What pictures are stuck on top of me?"). The hole 
      // labeled with "Next Part" contains any number.
      wants7.setHole(0, TT.BLANK_TEXT);
      wants7.setHole(1, TT.BLANK_BOX);
      wants7.setHole(2, TT.BLANK_NUMBER);
      robot25.setWants(wants7);
      robot22.setNextRobot(robot25);
      picture15.addTeam(team17);
    return picture15;
  }
  public static TTPicture PicturePart5(TTNotebook notebook, TTPicture container) { 
    TTPicture picture27 = new TTRectangle(500, 500, 104, 104, 0, 0, 255, 0, 255, false, true, true);
      TTBox box28 = new TTBox(3);
      TTPicture picture29 = new TTRemoteLooks(picture27, 500, 500, 1000, 1000, 0, 0, true, true, false);
      TTPicture picture30 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 0, 255, 0, false, true, false);
      box28.setHole(0, picture29);
      box28.setHole(1, picture30);
      box28.setHole(2, nest3);
      // We just made a box with 3 holes. The hole labeled with "Looks" contains a 
      // remote control for another's looks - a rectangle with 2 pictures on top. 
      // The first thing on top is a rectangle. And the second thing on top is a 
      // rectangle. And on the back are 7 things. The first thing on the back is a 
      // pad with the text "HarmonicSeries" on it. And the second thing on the back 
      // is a pad with the text "Type space to add the next fraction to total." on 
      // it. And the third thing on the back is a rectangle. The first thing on the 
      // back is ... I've said enough.
      TTRobot robot31 = new Robot758_36602080(notebook);
      TTBox box32 = new TTBox(3);
      TTBox box33 = new TTBox(2);
      TTBox wants8 = box32;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Looks" contains any picture (for example, a rectangle. The first thing on 
      // the back is a pad with the text "I add a picture to a picture "count" 
      // times." on it). The hole labeled with "Addition" contains any picture (for 
      // example, a rectangle). The hole labeled with "Count" contains a box with 2 
      // holes. The first hole contains the integer 0. The second hole contains any 
      // picture (for example, a ball).
      wants8.setHole(0, TT.BLANK_PICTURE);
      wants8.setHole(1, TT.BLANK_PICTURE);
      wants8.setHole(2, box33);
      wants8.hole(2).setHole(0, new TTNumber(0, TT.NO_NUMBER_OPERATION, 0, 0, 0));
      wants8.hole(2).setHole(1, TT.BLANK_PICTURE);
      robot31.setWants(wants8);
      TTTeam team31 = new TTTeam(box28, robot31);
      TTRobot robot34 = new Robot757_1569398983(notebook);
      TTBox box35 = new TTBox(3);
      TTBox box36 = new TTBox(2);
      TTBox wants9 = box35;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Looks" contains any picture (for example, a rectangle. The first thing on 
      // the back is a pad with the text "I add a picture to a picture "count" 
      // times." on it). The hole labeled with "Addition" contains any picture (for 
      // example, a rectangle). The hole labeled with "Count" contains a box with 2 
      // holes. The first hole contains any number. The second hole contains any 
      // picture (for example, a ball).
      wants9.setHole(0, TT.BLANK_PICTURE);
      wants9.setHole(1, TT.BLANK_PICTURE);
      wants9.setHole(2, box36);
      wants9.hole(2).setHole(0, TT.BLANK_NUMBER);
      wants9.hole(2).setHole(1, TT.BLANK_PICTURE);
      robot34.setWants(wants9);
      robot31.setNextRobot(robot34);
      TTRobot robot37 = new Robot695_38027435(notebook);
      TTBox box38 = new TTBox(3);
      TTBox wants10 = box38;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Looks" contains any picture (for example, a rectangle with 4 pictures on 
      // top. The first thing on top is a rectangle. And the second thing on top is 
      // a rectangle. And the third thing on top is a rectangle. And the fourth 
      // thing on top is a rectangle). The hole labeled with "Addition" contains 
      // any picture (for example, a rectangle). The hole labeled with "Count" 
      // contains the integer 0.
      wants10.setHole(0, TT.BLANK_PICTURE);
      wants10.setHole(1, TT.BLANK_PICTURE);
      wants10.setHole(2, new TTNumber(0, TT.NO_NUMBER_OPERATION, 0, 0, 0));
      robot37.setWants(wants10);
      robot34.setNextRobot(robot37);
      TTRobot robot39 = new Robot694_1569398975(notebook);
      TTBox box40 = new TTBox(3);
      TTBox wants11 = box40;
      // This robot will only accept a box with 3 holes. The hole labeled with 
      // "Looks" contains any picture (for example, a rectangle). The hole labeled 
      // with "Addition" contains any picture (for example, a rectangle). The hole 
      // labeled with "Count" contains any number.
      wants11.setHole(0, TT.BLANK_PICTURE);
      wants11.setHole(1, TT.BLANK_PICTURE);
      wants11.setHole(2, TT.BLANK_NUMBER);
      robot39.setWants(wants11);
      robot37.setNextRobot(robot39);
      picture27.addTeam(team31);
      TTObject temp4 = new TTText("If I receive a number\rI add that many copies\rof the DEFAULT picture.\rIf I receive a box with a\rnumber and a picture I\radd that picture that many\rtimes and change the default\rpicture.");
      picture27.addOnBack(temp4);
    return picture27;
  }
  public static TTPicture PicturePart6(TTNotebook notebook, TTPicture container) { 
    TTPicture picture41 = new TTRectangle(500, 500, 103, 103, 0, 0, 0, 255, 255, false, true, true);
      TTBox box42 = new TTBox(4);
      box42.setHole(0, nest1);
      box42.setHole(1, nest5);
      TTObject item_on_nest1;
      item_on_nest1 = new TTNumber(0, TT.NO_NUMBER_OPERATION, 0, 0, 0);
      box42.hole(1).putOnNest(item_on_nest1);
      box42.setHole(2, nest6);
      TTObject item_on_nest2;
      item_on_nest2 = new TTNumber(10, TT.NO_NUMBER_OPERATION, 0, 0, 0);
      box42.hole(2).putOnNest(item_on_nest2);
      box42.setHole(3, new TTBird());
      box42.hole(3).setNest(nest4);
      // We just made a box with 4 holes. The hole labeled with "Input numbers" 
      // contains an empty nest. The hole labeled with "Min" contains a nest 
      // covered with the integer 0. The hole labeled with "Max" contains a nest 
      // covered with the integer 10. The fourth hole contains a bird.
      TTRobot robot43 = new Robot756_1367318734(notebook);
      TTBox box44 = new TTBox(4);
      TTBox wants12 = box44;
      // This robot will only accept a box with 4 holes. The hole labeled with "In" 
      // contains any number. The hole labeled with "Min" contains any number. The 
      // hole labeled with "Max" contains any number. The fourth hole contains a 
      // bird.
      wants12.setHole(0, TT.BLANK_NUMBER);
      wants12.setHole(1, TT.BLANK_NUMBER);
      wants12.setHole(2, TT.BLANK_NUMBER);
      wants12.setHole(3, new TTBird());
      robot43.setWants(wants12);
      TTTeam team43 = new TTTeam(box42, robot43);
      picture41.addTeam(team43);
      picture41.addOnBack(HarmonicSeries.PicturePart11(notebook, picture41));
    return picture41;
  }
  public static TTPicture PicturePart7(TTNotebook notebook, TTPicture container) { 
    TTPicture picture45 = new TTRectangle(500, 500, 525, 523, 0, 0, 255, 0, 0, false, true, true);
      picture45.addPicture(HarmonicSeries.PicturePart9(notebook, picture45).resetGeometry(500, 500, 1000, 1000, 0, 0));
      picture45.addPicture(HarmonicSeries.PicturePart12(notebook, picture45));
      picture45.addPicture(HarmonicSeries.PicturePart13(notebook, picture45));
      TTObject temp5 = new TTText("I spread out my parts\revenly from left to right.\r");
      picture45.addOnBack(temp5);
      TTBox box46 = new TTBox(2);
      box46.setHole(0, new TTRemotePicture(0, null, TT.NO_NUMBER_OPERATION, TT.CHILDREN_REMOTE, picture45, TT.AMERICAN_ENGLISH));
      box46.setHole(1, new TTNumber(2, TT.NO_NUMBER_OPERATION, 0, 0, 0));
      // We just made a box with 2 holes. The hole labeled with "Parts" contains a 
      // remote control for the answer to the question "What pictures are stuck on 
      // top of me?".
      TTRobot robot47 = new Robot583_3550059522(notebook);
      TTBox box48 = new TTBox(2);
      TTBox wants13 = box48;
      // This robot will only accept a box with 2 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number.
      wants13.setHole(0, TT.BLANK_BOX);
      wants13.setHole(1, TT.BLANK_NUMBER);
      robot47.setWants(wants13);
      TTTeam team47 = new TTTeam(box46, robot47);
      TTRobot robot49 = new Robot589_461602900(notebook);
      TTBox box50 = new TTBox(4);
      TTBox wants14 = box50;
      // This robot will only accept a box with 4 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number. The third hole contains a balanced 
      // scale. The fourth hole contains any number.
      wants14.setHole(0, TT.BLANK_BOX);
      wants14.setHole(1, TT.BLANK_NUMBER);
      wants14.setHole(2, new TTScale('='));
      wants14.setHole(3, TT.BLANK_NUMBER);
      robot49.setWants(wants14);
      robot47.setNextRobot(robot49);
      TTRobot robot52 = new Robot592_461602889(notebook);
      TTBox box53 = new TTBox(4);
      TTBox wants15 = box53;
      // This robot will only accept a box with 4 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number. The hole labeled with "New count" 
      // contains the integer 0.
      wants15.setHole(0, TT.BLANK_BOX);
      wants15.setHole(1, TT.BLANK_NUMBER);
      wants15.setHole(2, TT.NOTHING);
      wants15.setHole(3, new TTNumber(0, TT.NO_NUMBER_OPERATION, 0, 0, 0));
      robot52.setWants(wants15);
      robot49.setNextRobot(robot52);
      TTRobot robot54 = new Robot887_3543244345(notebook);
      TTBox box55 = new TTBox(4);
      TTBox wants16 = box55;
      // This robot will only accept a box with 4 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number. The hole labeled with "New count" 
      // contains any number.
      wants16.setHole(0, TT.BLANK_BOX);
      wants16.setHole(1, TT.BLANK_NUMBER);
      wants16.setHole(2, TT.NOTHING);
      wants16.setHole(3, TT.BLANK_NUMBER);
      robot54.setWants(wants16);
      robot52.setNextRobot(robot54);
      TTRobot robot56 = new Robot588_461602901(notebook);
      TTBox box57 = new TTBox(5);
      TTBox box58 = new TTBox(0);
      TTBox wants17 = box57;
      // This robot will only accept a box with 5 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number. The hole labeled with "Width" 
      // contains any number. The hole labeled with "To update" contains a box with 
      // 0 holes. The hole labeled with "Left" contains any number.
      wants17.setHole(0, TT.BLANK_BOX);
      wants17.setHole(1, TT.BLANK_NUMBER);
      wants17.setHole(2, TT.BLANK_NUMBER);
      wants17.setHole(3, box58);
      wants17.setHole(4, TT.BLANK_NUMBER);
      robot56.setWants(wants17);
      robot54.setNextRobot(robot56);
      TTRobot robot59 = new Robot587_1451860041(notebook);
      TTBox box60 = new TTBox(5);
      TTBox wants18 = box60;
      // This robot will only accept a box with 5 holes. The hole labeled with 
      // "Parts" contains any picture (for example, a remote control for the answer 
      // to the question "What pictures are stuck on top of me?"). The hole labeled 
      // with "Old count" contains any number. The hole labeled with "Width" 
      // contains any number. The hole labeled with "To update" contains any box. 
      // The hole labeled with "Left" contains any number.
      wants18.setHole(0, TT.BLANK_BOX);
      wants18.setHole(1, TT.BLANK_NUMBER);
      wants18.setHole(2, TT.BLANK_NUMBER);
      wants18.setHole(3, TT.BLANK_BOX);
      wants18.setHole(4, TT.BLANK_NUMBER);
      robot59.setWants(wants18);
      robot56.setNextRobot(robot59);
      picture45.addTeam(team47);
    return picture45;
  }
  public static TTPicture PicturePart8(TTNotebook notebook, TTPicture container) { 
    TTPicture picture61 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 255, 251, 240, false, true, false);
      picture61.addPicture(HarmonicSeries.PicturePart14(notebook, picture61));
    return picture61;
  }
  public static TTPicture PicturePart9(TTNotebook notebook, TTPicture container) { 
    TTPicture picture62 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 0, 0, 0, false, true, false);
    return picture62;
  }
  public static TTPicture PicturePart10(TTNotebook notebook, TTPicture container) { 
    TTPicture picture63 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 255, 0, 255, false, true, false);
    return picture63;
  }
  public static TTPicture PicturePart11(TTNotebook notebook, TTPicture container) { 
    TTPicture picture64 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 255, 251, 240, false, true, false);
      picture64.addPicture(HarmonicSeries.PicturePart15(notebook, picture64));
    return picture64;
  }
  public static TTPicture PicturePart12(TTNotebook notebook, TTPicture container) { 
    TTPicture picture65 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 255, 255, 255, false, true, false);
    return picture65;
  }
  public static TTPicture PicturePart13(TTNotebook notebook, TTPicture container) { 
    TTPicture picture66 = new TTRectangle(500, 500, 1000, 1000, 0, 0, 0, 255, 255, false, true, false);
    return picture66;
  }
  public static TTPicture PicturePart14(TTNotebook notebook, TTPicture container) { 
    TTPicture picture67 = new TTIndirectPicture(new TTText("Give this robot a box with a copy of the nest from\rthe HeightSetter tool that is receiving the incoming\rdata and a copy of the bird to the Add Part tool."), 514, 501, 1027, 1123, 0, 0, false, true, false);
    return picture67;
  }
  public static TTPicture PicturePart15(TTNotebook notebook, TTPicture container) { 
    TTPicture picture68 = new TTIndirectPicture(new TTText("I change incoming numbers to a value\rbetween 0 to 1000. I need to be given\rthe MINIMUM (smallest) and \rMAXIMUM (biggest) expected values."), 518, 517, 983, 1061, 0, 0, false, true, false);
    return picture68;
  }
  protected static TTNest nest0;
  protected static TTNest nest1;
  protected static TTNest nest2;
  protected static TTNest nest3;
  protected static TTNest nest4;
  protected static TTNest nest5;
  protected static TTNest nest6;
  private void intializeNests() {
    nest0 = new TTNest("Harmonic\rSeries");
    nest1 = new TTNest("Input\rNumbers");
    nest2 = new TTNest("Input\rNumbers");
    nest3 = new TTNest("Count");
    nest4 = new TTNest("scaled\routput");
    nest5 = new TTNest("Minimum\rinput");
    nest6 = new TTNest("Maximum\rInput");
  }
  private void intializeToonTalkImages() {
  }
}
